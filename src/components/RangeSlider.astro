<!-- CustomRangeSlider.astro -->
<div class="max-w-xl mx-auto p-6">
    <div class="relative">
        <!-- Range Labels -->
        <div class="flex justify-between mb-2">
            <span
                class="text-[20px] font-medium text-white text-opacity-50 select-none"
                >1,500</span
            >
            <span
                class="text-[20px] font-medium text-white text-opacity-50 select-none"
                >100,000</span
            >
        </div>

        <!-- Range Track -->
        <div class="relative h-2 bg-gray-200 bg-opacity-20 rounded-full">
            <!-- Active Track -->
            <div id="active-track" class="absolute h-2 bg-white rounded-full">
            </div>
            <!-- Slider Handle -->
            <div
                id="slider-handle"
                class="absolute bottom-1 translate-y-1/2 outline-none focus:ring-4 focus:ring-white focus:ring-opacity-50 w-6 h-6 bg-white rounded-full cursor-pointer flex items-center justify-center shadow-lg transform transition-transform -translate-x-1/2"
                tabindex="0"
                role="slider"
                aria-valuemin="1500"
                aria-valuemax="100000"
                aria-valuenow="50750"
                aria-label="Select value"
            >
                <!-- Tooltip -->
                <div
                    id="value-tooltip"
                    class="absolute -top-10 left-1/2 transform -translate-x-1/2 text-white px-2 py-1 rounded text-[22px] whitespace-nowrap select-none"
                >
                    50,750
                </div>
            </div>
        </div>
    </div>
</div>

<script is:inline>
    const MIN_VALUE = 1500
    const MAX_VALUE = 100000
    const STEP = 500
    const VALUE_RANGE = MAX_VALUE - MIN_VALUE

    const sliderHandle = document.getElementById("slider-handle")
    const activeTrack = document.getElementById("active-track")
    const tooltip = document.getElementById("value-tooltip")
    const track = sliderHandle.parentElement

    let currentValue = 50750
    let isDragging = false

    const formatValue = (value) => value.toLocaleString("en-US")

    const roundToStep = (value) => Math.round(value / STEP) * STEP

    const updateSliderUI = (value) => {
        const percentage = ((value - MIN_VALUE) / VALUE_RANGE) * 100

        // Update handle position and active track width
        sliderHandle.style.left = `${percentage}%`
        activeTrack.style.width = `${percentage}%`

        // Update tooltip and ARIA attributes
        tooltip.textContent = `${formatValue(value)}${value === 100000 ? "+" : ""}`
        sliderHandle.setAttribute("aria-valuenow", value)
    }

    const calculateValue = (positionX) => {
        const trackRect = track.getBoundingClientRect()
        const relativeX = Math.max(
            0,
            Math.min(positionX - trackRect.left, trackRect.width)
        )
        const percentage = relativeX / trackRect.width
        return roundToStep(MIN_VALUE + percentage * VALUE_RANGE)
    }

    const startDrag = (event) => {
        sliderHandle.focus()
        isDragging = true
        document.addEventListener("mousemove", handleDrag)
        document.addEventListener("mouseup", stopDrag)
    }

    const handleDrag = (event) => {
        if (!isDragging) return
        const newValue = calculateValue(event.clientX)
        if (newValue !== currentValue) {
            currentValue = newValue
            updateSliderUI(currentValue)
        }
    }

    const stopDrag = () => {
        isDragging = false
        document.removeEventListener("mousemove", handleDrag)
        document.removeEventListener("mouseup", stopDrag)
    }

    const handleTrackClick = (event) => {
        const newValue = calculateValue(event.clientX)
        if (newValue !== currentValue) {
            currentValue = newValue
            updateSliderUI(currentValue)
        }
    }

    const handleKeyboard = (event) => {
        let newValue = currentValue
        switch (event.key) {
            case "ArrowLeft":
            case "ArrowDown":
                event.preventDefault()
                newValue -= STEP
                break
            case "ArrowRight":
            case "ArrowUp":
                event.preventDefault()
                newValue += STEP
                break
            case "Home":
                event.preventDefault()
                newValue = MIN_VALUE
                break
            case "End":
                event.preventDefault()
                newValue = MAX_VALUE
                break
        }
        newValue = Math.max(MIN_VALUE, Math.min(MAX_VALUE, newValue))
        if (newValue !== currentValue) {
            currentValue = newValue
            updateSliderUI(currentValue)
        }
    }

    sliderHandle.addEventListener("mousedown", startDrag)
    sliderHandle.addEventListener("keydown", handleKeyboard)

    track.addEventListener("click", handleTrackClick)

    // Initialize slider position
    window.addEventListener("DOMContentLoaded", () =>
        updateSliderUI(currentValue)
    )
</script>
