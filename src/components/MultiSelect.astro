---
import PlusIcon from "./icons/PlusIcon.astro"

// MultiSelect.astro
interface Props {
    options: string[]
    name: string
    placeholder?: string
}

const { options, name, placeholder = "Select options..." } = Astro.props
---

<div class="relative" data-multi-select>
    <div
        tabindex="0"
        aria-haspopup="listbox"
        role="combobox"
        aria-expanded="false"
        class="focus:border-primary focus:ring-2 focus:ring-primary outline-none border border-white border-opacity-10 py-[14px] px-6 rounded-2xl flex items-center flex-wrap gap-2.5 cursor-pointer bg-transparent"
        data-selected-container
    >
        <input
            type="text"
            class="outline-none placeholder-[#262831] pointer-events-none border-none text-[18px] rounded-2xl flex-grow bg-transparent cursor-pointer"
            placeholder={placeholder}
            readonly
            data-services-input
            disabled
        />
        <div class="bg-white text-[#090A0E] p-[13px] rounded-lg w-min ml-auto">
            <PlusIcon class="w-[14px] h-[14px]" />
        </div>
    </div>

    <div
        class="absolute w-full mt-1 max-h-60 overflow-y-auto border rounded-md bg-[#D0D2DE] hidden"
        role="listbox"
        tabindex="-1"
        data-options-container
    >
        {
            options.map((option, index) => (
                <div
                    class="p-2 hover:bg-gray-100 cursor-pointer"
                    role="option"
                    aria-selected="false"
                    data-option={option}
                    data-option-index={index}
                >
                    {option}
                </div>
            ))
        }
    </div>

    <input type="hidden" name={name} data-values-input />
</div>

<script is:inline>
    class MultiSelect {
        constructor(element) {
            this.container = element
            this.selectedContainer = element.querySelector(
                "[data-selected-container]"
            )
            this.optionsContainer = element.querySelector(
                "[data-options-container]"
            )
            this.servicesInput = element.querySelector("[data-services-input]")
            this.valuesInput = element.querySelector("[data-values-input]")
            this.selectedValues = new Set()
            this.activeIndex = -1
            this.isOpen = false
            this.ignoreBlur = false

            this.init()
        }

        init() {
            const form = this.container.closest("form")
            if (form) {
                form.addEventListener("reset", () => this.clearSelection())
            }

            this.selectedContainer.addEventListener("click", () => {
                this.toggleDropdown()
            })

            this.optionsContainer.addEventListener("click", (e) => {
                const option = e.target.closest("[data-option]")
                if (option) {
                    const value = option.dataset.option
                    this.toggleOption(value, option)
                    // Reset active index after click and maintain focus
                    this.activeIndex = parseInt(option.dataset.optionIndex)
                    this.selectedContainer.focus()
                }
            })

            this.optionsContainer.addEventListener("mousedown", (e) => {
                // Prevent blur event from firing before click
                this.ignoreBlur = true
            })

            document.addEventListener("click", (e) => {
                if (!this.container.contains(e.target)) {
                    this.closeDropdown()
                }
            })

            this.selectedContainer.addEventListener("keydown", (e) =>
                this.handleKeyDown(e)
            )

            this.selectedContainer.addEventListener("blur", () => {
                if (!this.ignoreBlur) {
                    this.closeDropdown()
                }
                // Reset the flag
                this.ignoreBlur = false
            })

            this.optionsContainer.addEventListener("mouseover", (e) => {
                const option = e.target.closest("[data-option]")
                if (option) {
                    this.setActiveOption(parseInt(option.dataset.optionIndex))
                }
            })
        }

        handleKeyDown(e) {
            if (
                !this.isOpen &&
                e.key !== "Enter" &&
                e.key !== "Backspace" &&
                e.key !== "Delete"
            ) {
                this.openDropdown()
            }

            switch (e.key) {
                case "Enter":
                    e.preventDefault()
                    if (!this.isOpen) {
                        this.openDropdown()
                    } else if (this.activeIndex >= 0) {
                        const activeOption = this.getOptionByIndex(
                            this.activeIndex
                        )
                        if (activeOption) {
                            const value = activeOption.dataset.option
                            this.toggleOption(value, activeOption)
                        }
                    }
                    break
                case "ArrowDown":
                    e.preventDefault()
                    this.moveActiveOption(1)
                    break
                case "ArrowUp":
                    e.preventDefault()
                    this.moveActiveOption(-1)
                    break
                case "Escape":
                    this.closeDropdown()
                    break
                case "Backspace":
                case "Delete":
                    e.preventDefault()
                    this.deleteSelectedItem()
                    break
            }
        }

        moveActiveOption(direction) {
            const options = Array.from(
                this.optionsContainer.querySelectorAll("[data-option]")
            )
            if (!options.length) return

            let newIndex = this.activeIndex + direction

            // Loop around at the ends
            if (newIndex < 0) newIndex = options.length - 1
            if (newIndex >= options.length) newIndex = 0

            this.setActiveOption(newIndex)
        }

        clearSelection() {
			this.servicesInput.classList.remove("hidden")
            const selectedItems =
                this.selectedContainer.querySelectorAll("[data-value]")
            selectedItems.forEach((item) => item.remove())

            this.selectedValues.clear()

            this.valuesInput.value = ""

            const options =
                this.optionsContainer.querySelectorAll("[data-option]")
            options.forEach((option) => {
                option.classList.remove("opacity-50")
                option.setAttribute("aria-selected", "false")
            })

            this.activeIndex = -1
        }

        setActiveOption(index) {
            const options =
                this.optionsContainer.querySelectorAll("[data-option]")
            options.forEach((opt) => opt.classList.remove("bg-gray-100"))

            this.activeIndex = index

            const activeOption = this.getOptionByIndex(index)
            if (activeOption) {
                activeOption.classList.add("bg-gray-100")
                activeOption.scrollIntoView({ block: "nearest" })
            }
        }

        getOptionByIndex(index) {
            return this.optionsContainer.querySelector(
                `[data-option-index="${index}"]`
            )
        }

        toggleDropdown() {
            this.isOpen ? this.closeDropdown() : this.openDropdown()
        }

        openDropdown() {
            this.isOpen = true
            this.optionsContainer.classList.remove("hidden")
            this.selectedContainer.setAttribute("aria-expanded", "true")
            // Only set active option if there isn't one already
            if (this.activeIndex === -1) {
                this.setActiveOption(0)
            }
        }

        closeDropdown() {
            this.isOpen = false
            this.optionsContainer.classList.add("hidden")
            this.selectedContainer.setAttribute("aria-expanded", "false")
            // Don't reset active index when closing
        }

        toggleOption(value, option) {
            if (this.selectedValues.has(value)) {
                const item = this.selectedContainer.querySelector(
                    `[data-value="${value}"]`
                )
                if (item) {
                    this.removeItem(value, item)
                }
            } else {
                this.addItem(value)
                this.markOptionAsSelected(option)
            }
        }

        createSelectedItem(value) {
            const item = document.createElement("div")
            item.className =
                "bg-primary px-4 py-1.5 rounded-[8px] overflow-hidden flex min-h-10 max-w-[calc(100%-53px)] items-center text-[18px] text-white gap-1"
            item.setAttribute("data-value", value)

            const textNode = document.createElement("span")
            // textNode.className = "truncate inline-block line-clamp-1"
            textNode.textContent = value
            item.appendChild(textNode)

            const removeBtn = document.createElement("span")
            removeBtn.className =
                "text-white hover:text-black px-1 font-bold ml-1 cursor-pointer"
            removeBtn.setAttribute("data-remove", "")
            removeBtn.textContent = "Ã—"

            removeBtn.addEventListener("click", (e) => {
                e.stopPropagation()
                this.removeItem(value, item)
            })

            item.appendChild(removeBtn)
            return item
        }

        markOptionAsSelected(option) {
            option.classList.add("opacity-50")
            option.setAttribute("aria-selected", "true")
        }

        unmarkOptionAsSelected(value) {
            const option = this.optionsContainer.querySelector(
                `[data-option="${value}"]`
            )
            if (option) {
                option.classList.remove("opacity-50")
                option.setAttribute("aria-selected", "false")
            }
        }

        addItem(value) {
            if (this.selectedValues.has(value)) return
            if (!this.servicesInput.classList.contains("hidden")) {
                this.servicesInput.classList.add("hidden")
            }
            const item = this.createSelectedItem(value)
            this.selectedContainer.insertBefore(item, this.servicesInput)
            this.selectedValues.add(value)
            this.updateValuesInput()
        }

        removeItem(value, element) {
            if (this.selectedValues.size === 1) {
                if (this.servicesInput.classList.contains("hidden")) {
                    this.servicesInput.classList.remove("hidden")
                }
            }
            this.selectedValues.delete(value)
            element.remove()
            this.unmarkOptionAsSelected(value)
            this.updateValuesInput()
        }

        deleteSelectedItem() {
            if (this.selectedValues.size > 0) {
                const lastSelectedValue = Array.from(this.selectedValues).pop()
                const itemToDelete = this.selectedContainer.querySelector(
                    `[data-value="${lastSelectedValue}"]`
                )
                if (itemToDelete) {
                    this.removeItem(lastSelectedValue, itemToDelete)
                }
            }
        }

        updateValuesInput() {
            this.valuesInput.value = Array.from(this.selectedValues).join(",")
        }
    }

    document.querySelectorAll("[data-multi-select]").forEach((element) => {
        new MultiSelect(element)
    })
</script>
